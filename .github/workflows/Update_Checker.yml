#
# Copyright (c) 2019-2021 smallprogram
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/smallprogram/OpenWrtAction
# File: .github/workflows/Update_Checker.yml
# Description: Source code update checker
#

name: Update_Checker

env:

  # smallprogramOpenWrtAction源码
  REPO_URL_smallprogramAction: https://github.com/smallprogram/OpenWrtAction.git
  REPO_BRANCH_smallprogramAction: main
  REPO_PATH_smallprogramAction : "smallprogramOpenWrtAction"

  # Lean源码
  REPO_URL_Lede: https://github.com/coolsnowwolf/lede
  REPO_BRANCH_Lede: master
  REPO_PATH_Lede : "lede"

  # Lean Package源码
  REPO_URL_Lede_Package: https://github.com/coolsnowwolf/packages
  REPO_BRANCH_Lede_Package: master
  REPO_PATH_Lede_Package : "ledepackage"

  # Lean luci源码
  REPO_URL_Lede_Luci: https://github.com/coolsnowwolf/luci
  REPO_BRANCH_Lede_Luci: master
  REPO_PATH_Lede_Luci : "luci"

  # Openwrt routing源码
  REPO_URL_OPENWRT_ROUTING: https://git.openwrt.org/feed/routing.git
  REPO_BRANCH_OPENWRT_ROUTING: master
  REPO_PATH_OPENWRT_ROUTING : "routing"

  # Openwrt telephony源码
  REPO_URL_OPENWRT_TELEPHONY: https://git.openwrt.org/feed/telephony.git
  REPO_BRANCH_OPENWRT_TELEPHONY: master
  REPO_PATH_OPENWRT_TELEPHONY : "telephony"
  
   # SSRP源码
  REPO_URL_HelloWorld: https://github.com/fw876/helloworld
  REPO_BRANCH_HelloWorld: master
  REPO_PATH_HelloWorld : "helloworld"

  # Passwall packages源码
  REPO_URL_PassWall_Packages: https://github.com/xiaorouji/openwrt-passwall-packages
  REPO_BRANCH_PassWall_Packages: main
  REPO_PATH_PassWall_Packages : "openwrt-passwall_packages"

  # Passwall luci源码
  REPO_URL_PassWall: https://github.com/xiaorouji/openwrt-passwall
  REPO_BRANCH_PassWall: main
  REPO_PATH_PassWall : "openwrt-passwall"

  # Passwall2源码
  REPO_URL_PassWall2: https://github.com/xiaorouji/openwrt-passwall2.git
  REPO_BRANCH_PassWall2: main
  REPO_PATH_PassWall2 : "openwrt-passwall2"

  # OpenClash源码
  REPO_URL_OpenClash: https://github.com/vernesong/OpenClash.git
  REPO_BRANCH_OpenClash: master
  REPO_PATH_OpenClash : "openclash"

  # jerrykuku/luci-theme-argon主题源码
  REPO_URL_ThemeArgon: https://github.com/jerrykuku/luci-theme-argon
  REPO_BRANCH_ThemeArgon: master
  REPO_PATH_ThemeArgon : "luci-theme-argon"

  # luci-app-argon-config主题配置源码
  REPO_URL_ArgonConfig: https://github.com/jerrykuku/luci-app-argon-config
  REPO_BRANCH_ArgonConfig: master
  REPO_PATH_ArgonConfig : "luci-app-argon-config"

  # Dockerman源码
  # REPO_URL_luci_app_dockerman: https://github.com/lisaac/luci-app-dockerman
  # REPO_BRANCH_luci_app_dockerman: master
  # REPO_PATH_luci_app_dockerman : "luci-app-dockerman"

  # luci-app-vssr的依赖源码
  # REPO_URL_lua_maxminddb: https://github.com/jerrykuku/lua-maxminddb
  # REPO_BRANCH_lua_maxminddb: master
  # REPO_PATH_lua_maxminddb : "lua-maxminddb"

  # luci-app-vssr源码
  # REPO_URL_luci_app_vssr: https://github.com/jerrykuku/luci-app-vssr
  # REPO_BRANCH_luci_app_vssr: master
  # REPO_PATH_luci_app_vssr : "luci-app-vssr"

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: 0 */8 * * *

jobs:
  check:
    runs-on: ubuntu-latest

    steps:

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

    - name: Get Commit Hash
      id: getHash
      run: |
        # git clone --depth 1 $REPO_URL_smallprogramAction -b $REPO_BRANCH_smallprogramAction $REPO_PATH_smallprogramAction
        # cd $REPO_PATH_smallprogramAction
        # echo "commitHash_smallprogramAction=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        # cd

        git clone --depth 1 $REPO_URL_Lede -b $REPO_BRANCH_Lede $REPO_PATH_Lede
        cd $REPO_PATH_Lede
        echo "commitHash_Lede=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd

        git clone --depth 1 $REPO_URL_Lede_Package -b $REPO_BRANCH_Lede_Package $REPO_PATH_Lede_Package
        cd $REPO_PATH_Lede_Package
        echo "commitHash_Lede_Package=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd

        git clone --depth 1 $REPO_URL_Lede_Luci -b $REPO_BRANCH_Lede_Luci $REPO_PATH_Lede_Luci
        cd $REPO_PATH_Lede_Luci
        echo "commitHash_Lede_Luci=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd

        git clone --depth 1 $REPO_URL_OPENWRT_ROUTING -b $REPO_BRANCH_OPENWRT_ROUTING $REPO_PATH_OPENWRT_ROUTING
        cd $REPO_PATH_OPENWRT_ROUTING
        echo "commitHash_OPENWRT_ROUTING=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd
        
        git clone --depth 1 $REPO_URL_OPENWRT_TELEPHONY -b $REPO_BRANCH_OPENWRT_TELEPHONY $REPO_PATH_OPENWRT_TELEPHONY
        cd $REPO_PATH_OPENWRT_TELEPHONY
        echo "commitHash_OPENWRT_TELEPHONY=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd

        git clone --depth 1 $REPO_URL_HelloWorld -b $REPO_BRANCH_HelloWorld $REPO_PATH_HelloWorld 
        cd $REPO_PATH_HelloWorld
        echo "commitHash_HelloWorld=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd

        git clone --depth 1 $REPO_URL_PassWall_Packages -b $REPO_BRANCH_PassWall_Packages $REPO_PATH_PassWall_Packages
        cd $REPO_PATH_PassWall_Packages
        echo "commitHash_PassWall_Package=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd

        git clone --depth 1 $REPO_URL_PassWall -b $REPO_BRANCH_PassWall $REPO_PATH_PassWall
        cd $REPO_PATH_PassWall
        echo "commitHash_PassWall=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd

        git clone --depth 1 $REPO_URL_PassWall2 -b $REPO_BRANCH_PassWall2 $REPO_PATH_PassWall2
        cd $REPO_PATH_PassWall2
        echo "commitHash_PassWall2=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd

        git clone --depth 1 $REPO_URL_OpenClash -b $REPO_BRANCH_OpenClash $REPO_PATH_OpenClash
        cd $REPO_PATH_OpenClash
        echo "commitHash_OpenClash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd

        git clone --depth 1 $REPO_URL_ThemeArgon -b $REPO_BRANCH_ThemeArgon $REPO_PATH_ThemeArgon
        cd $REPO_PATH_ThemeArgon
        echo "commitHash_ThemeArgon=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd

        git clone --depth 1 $REPO_URL_ArgonConfig -b $REPO_BRANCH_ArgonConfig $REPO_PATH_ArgonConfig 
        cd $REPO_PATH_ArgonConfig 
        echo "commitHash_ArgonConfig=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd

        # git clone --depth 1 $REPO_URL_luci_app_dockerman -b $REPO_BRANCH_luci_app_dockerman $REPO_PATH_luci_app_dockerman
        # cd $REPO_PATH_luci_app_dockerman
        # echo "commitHash_luci_app_dockerman=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        # cd

    - name: Show Commit Head and Combination Heads
      id: combHeader
      run: |
        echo "commitHash_All=\
          ${{steps.getHash.outputs.commitHash_Lede}}\
          ${{steps.getHash.outputs.commitHash_Lede_Package}}\
          ${{steps.getHash.outputs.commitHash_Lede_Luci}}\
          ${{steps.getHash.outputs.commitHash_OPENWRT_ROUTING}}\
          ${{steps.getHash.outputs.commitHash_OPENWRT_TELEPHONY}}\
          ${{steps.getHash.outputs.commitHash_HelloWorld}}\
          ${{steps.getHash.outputs.commitHash_PassWall_Package}}\
          ${{steps.getHash.outputs.commitHash_PassWall}}\
          ${{steps.getHash.outputs.commitHash_PassWall2}}\
          ${{steps.getHash.outputs.commitHash_OpenClash}}\
          ${{steps.getHash.outputs.commitHash_ThemeArgon}}\
          ${{steps.getHash.outputs.commitHash_ArgonConfig}}" >> $GITHUB_OUTPUT

    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v3.0.11
      with:
        path: .commitHash_All
        key: HEAD-${{ steps.combHeader.outputs.commitHash_All }}
   

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.combHeader.outputs.commitHash_All }} | tee .commitHash_All
        
    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.2
      with:
        keep_latest: 5
        keep_min_download_counts: 2
        delete_expired_data: 90
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Trigger build
      if: steps.cacheHash.outputs.cache-hit != 'true'
      uses: peter-evans/repository-dispatch@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: OpenWrt Related Code Updates


#
# Copyright (c) 2022-2023 SMALLPROGRAM <https://github.com/smallprogram/OpenWrtAction>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/smallprogram/OpenWrtAction
# Description: Build OpenWrt using GitHub Actions
#

name: Build-OpenWrtSelfHost_X86

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  # schedule:
  #   - cron: 0 */8 * * *

env:
  TZ: Asia/Shanghai
  RELEASE_TAG: X86
  CONFIG_NAME: X86.config
  UPLOAD_RELEASE: true
  COMMIT_LOG_NUM: 1


jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout
      uses: actions/checkout@main
  
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
    
    - name: Update Action Source
      id: UpdateSource
      run: |
        cd /home/$USER/actions-runner/_work/OpenWrtAction/OpenWrtAction
        bash SelfHostCheck.sh
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Compile the firmware
      id: compile
      if: steps.UpdateSource.outputs.status == 'success' && !cancelled()
      run: |
        cd /home/$USER/OpenWrtAction
        # bash wsl2op.sh $CONFIG_NAME
        echo "status=error" >> $GITHUB_OUTPUT
        cd /home/$USER/lede_$CONFIG_NAME
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    

    - name: Compile Error Post Log To Issue
      id: test
      if: steps.compile.outputs.status != 'success' && !cancelled()
      uses: GuillaumeFalourd/open-issue-action@v1
      with:
        access-token: ${{ secrets.PersonalClientToken }}
        repo-owner: coolsnowwolf
        repo-name: lede
        issue-title: test
        issue-body: '/home/zhusir/openwrt_log/log_Compile_X86.config_2022-08-30-20-04-03/Func_Main5_Compile-git_log.log'
        # issue-labels: bug # Not mandatory
        # issue-assignees: <username> # Not mandatory

    # - name: Organize files
    #   id: organize
    #   if: steps.compile.outputs.status == 'success' && !cancelled()
    #   run: |
    #     cd /home/$USER/lede_$CONFIG_NAME/bin/targets/*/*
    #     rm -rf packages
    #     echo "FIRMWARE=$PWD" >> $GITHUB_ENV
    #     echo "status=success" >> $GITHUB_OUTPUT

    # - name: Upload firmware directory
    #   uses: actions/upload-artifact@main
    #   if: steps.organize.outputs.status == 'success' && !cancelled()
    #   with:
    #     name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
    #     path: ${{ env.FIRMWARE }}    

    # - name: Generate release tag
    #   id: tag
    #   if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
    #   run: |
    #     cd /home/$USER
    #     mkdir -p openwrt_releaselog/$CONFIG_NAME
    #     cd openwrt_releaselog/$CONFIG_NAME
    #     find . -name "*.txt" | xargs rm -rf
    #     cd /home/$USER

    #     echo "release_tag=SelfHost-$RELEASE_TAG-$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT

    #     echo "## Update content" >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt

    #     echo "<details> <summary> Lean Openwrt Commit Top $COMMIT_LOG_NUM </summary>" >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt
    #     git -C lede_$CONFIG_NAME log -n $COMMIT_LOG_NUM >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt

    #     echo "</details> <details> <summary> Lean Package Commit Top $COMMIT_LOG_NUM </summary>" >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt
    #     git -C lede_$CONFIG_NAME/feeds/packages log -n $COMMIT_LOG_NUM >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt

    #     echo "</details> <details> <summary> Lean Luci Commit Top $COMMIT_LOG_NUM </summary>" >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt
    #     git -C lede_$CONFIG_NAME/feeds/luci log -n $COMMIT_LOG_NUM >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt

    #     echo "</details> <details> <summary> Openwrt routing Commit Top $COMMIT_LOG_NUM </summary>" >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt
    #     git -C lede_$CONFIG_NAME/feeds/routing log -n $COMMIT_LOG_NUM >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt

    #     echo "</details> <details> <summary> Openwrt telephony Commit Top $COMMIT_LOG_NUM </summary>" >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt
    #     git -C lede_$CONFIG_NAME/feeds/telephony log -n $COMMIT_LOG_NUM >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt

    #     echo "</details> <details> <summary> SSRP Commit Top $COMMIT_LOG_NUM </summary>" >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt
    #     git -C lede_$CONFIG_NAME/feeds/helloworld log -n $COMMIT_LOG_NUM >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt

    #     echo "</details> <details> <summary> Passwall Packages Commit Top $COMMIT_LOG_NUM </summary>" >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt
    #     git -C lede_$CONFIG_NAME/feeds/passwall_packages log -n $COMMIT_LOG_NUM >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt

    #     echo "</details> <details> <summary> Passwall Luci Commit Top $COMMIT_LOG_NUM </summary>" >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt
    #     git -C lede_$CONFIG_NAME/feeds/passwall_luci log -n $COMMIT_LOG_NUM >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt

    #     echo "</details> <details> <summary> Passwall2 Commit Top $COMMIT_LOG_NUM </summary>" >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt
    #     git -C lede_$CONFIG_NAME/feeds/passwall2 log -n $COMMIT_LOG_NUM >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt

    #     # echo "</details> <details> <summary> DockerMan Commit Top $COMMIT_LOG_NUM </summary>" >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt
    #     # git -C lede_$CONFIG_NAME/package/lean/luci-app-dockerman log -n $COMMIT_LOG_NUM >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt

    #     # echo "</details> <details> <summary> ThemeArgon Commit Top $COMMIT_LOG_NUM </summary>" >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt
    #     # git -C lede_$CONFIG_NAME/package/lean/luci-theme-argon log -n $COMMIT_LOG_NUM >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt

    #     # echo "</details> <details> <summary> ArgonConfig Commit Top $COMMIT_LOG_NUM </summary>" >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt
    #     # git -C lede_$CONFIG_NAME/package/lean/luci-app-argon-config log -n $COMMIT_LOG_NUM >> /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt

    #     touch /home/$USER/openwrt_releaselog/$CONFIG_NAME/release.txt
    #     cd /home/$USER/openwrt_releaselog/$CONFIG_NAME/
    #     echo "RELEASE_TAG=$PWD" >> $GITHUB_ENV
    #     echo "status=success" >> $GITHUB_OUTPUT

    # - name: Upload firmware to release
    #   uses: softprops/action-gh-release@v0.1.15
    #   if: steps.tag.outputs.status == 'success' && !cancelled()
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ steps.tag.outputs.release_tag }}
    #     body_path: ${{ env.RELEASE_TAG }}/release.txt
    #     files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: smallprogram/delete-older-releases@v0.2.1
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 15
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
